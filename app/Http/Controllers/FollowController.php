<?php

namespace App\Http\Controllers;

use App\Models\User;
use App\Models\Follow;
use Illuminate\Http\Request;

class FollowController extends Controller
{
    public function createFollow(User $user)
    {
        // you cannot follow yourself
        if ($user->id == auth()->user()->id) {
            return back()->with('failure', 'You cannot follow yourself.');
        }

        // you cannot follow someone you're already following
        $existCheck = Follow::where([['user_id', '=', auth()->user()->id], ['followeduser', '=', $user->id]])->count();

        if ($existCheck) {
            return back()->with('failure', 'You are already following that user.');
        }

        $newFollow = new Follow;
        $newFollow->user_id = auth()->user()->id;
        $newFollow->followeduser = $user->id;
        $newFollow->save();

        return back()->with('success', 'User successfully followed.');
    }

    public function removeFollow(User $user)
    {
        Follow::where([['user_id', '=', auth()->user()->id], ['followeduser', '=', $user->id]])->delete();
        return back()->with('success', 'User succesfully unfollowed.');
    }
}
 


// In the provided code, the value of the $newFollow instance created in the createFollow method of the FollowController is passed into the database using the save() method.

// Here's the relevant part of the code:

// php
// Copy code
// $newFollow = new Follow;
// $newFollow->user_id = auth()->user()->id;
// $newFollow->followeduser = $user->id;
// $newFollow->save();
// Explanation:

// A new instance of the Follow model is created using the $newFollow variable.
// The user_id attribute of the $newFollow instance is set to the currently logged-in user's ID using auth()->user()->id. This associates the follow relationship with the user who initiated the follow action.
// The followeduser attribute of the $newFollow instance is set to the ID of the user being followed ($user->id). This indicates the user who is being followed.
// The save() method is called on the $newFollow instance to persist the data in the database. This creates a new record in the follows table with the provided values.
// By calling $newFollow->save(), the instance is saved to the database, and the follow relationship between the logged-in user and the specified user is established.





// User
// more about: $newFollow->save();
// ChatGPT
// The $newFollow->save() method is used to save the $newFollow instance (an instance of the Follow model) to the database.

// Here's how it works:

// When $newFollow->save() is called, Laravel's Eloquent ORM (Object-Relational Mapping) will generate an SQL INSERT statement based on the attributes of the $newFollow instance.
// The INSERT statement is executed, and the data from the $newFollow instance is inserted into the corresponding table in the database. In this case, it would be the follows table.
// After the successful execution of the INSERT statement, the $newFollow instance will have its id attribute populated with the primary key value generated by the database for the newly created record.
// The $newFollow instance is now considered "persisted" or "saved" in the database, and any subsequent changes to its attributes will be updated in the database when you call the save() method again.
// In the provided code, calling $newFollow->save() persists the Follow instance to the database, creating a new record that represents a follow relationship between the logged-in user and the user being followed.

// It's important to note that before calling $newFollow->save(), you should ensure that the attributes of the $newFollow instance are properly set with the necessary values. In the code snippet you provided, the user_id and followeduser attributes are set before saving the instance to the database.





// User
// so in this line of code we take Follow class from Follow.php model in order to interact with database? Am i right? $newFollow = new Follow;
// ChatGPT
// Yes, you are correct. In the line $newFollow = new Follow;, the Follow class from the Follow.php model is used to create a new instance of the Follow model.

// By creating a new instance of the Follow model, you can interact with the database using Eloquent ORM. The Follow model represents the follows table in the database, and each instance of the Follow model represents a single row or record in that table.

// Once you have a new instance of the Follow model, you can set its attributes with the necessary values, such as user_id and followeduser, before saving it to the database using the save() method.

// In summary, the line $newFollow = new Follow; creates a new instance of the Follow model, which allows you to interact with the follows table in the database and perform CRUD (Create, Read, Update, Delete) operations on follow relationships.






// Yes, you are correct. In the line of code $existCheck = Follow::where([['user_id', '=', auth()->user()->id], ['followeduser', '=', $user->id]])->count();, the Follow::where() method is used to query the database.

// Here's how it works:

// Follow::where() indicates that we are performing a query on the Follow model, which represents the follows table in the database.
// Inside the where() method, we specify the conditions for the query using an array. In this case, there are two conditions:
// ['user_id', '=', auth()->user()->id]: This condition checks if the user_id column in the follows table is equal to the ID of the currently authenticated user (auth()->user()->id).
// ['followeduser', '=', $user->id]: This condition checks if the followeduser column in the follows table is equal to the ID of the user being followed ($user->id).
// By chaining the count() method at the end, the query is executed, and it returns the number of rows that match the specified conditions. The value is then assigned to the variable $existCheck.

// Essentially, this line of code is checking if there is a row in the follows table where the currently authenticated user is already following the target user ($user). If the count is greater than 0, it means such a row exists, indicating that the user is already following the target user.